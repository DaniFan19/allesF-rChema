public class Main {

	public static void main(String[] args)  {
		
//		String path = "C:/Users/D.M.2/Desktop/Gesundheitsdaten.txt";
		String path2 = "C:/Users/D.M.2/Desktop/IKG/1. Semester/Prog1/11. Woche/Berlin.csv";
		PatientList patList = new PatientList();
		
		patList.addFromCSVFile(path2);	
		
		Loesung.monthlyInfections(patList, 2020, 2021, 1, 12);	
		
		
//		try {
//			int i = Integer.parseInt("b");	// Fehler: b kann nicht zu einem Integer geparst werden 
//			System.out.println(1+i);
//		}
//		catch(Exception e){
//			System.out.println( "b ist keine Zahl");		
//			
//			System.out.println("Trotz Fehler (NumberFromatException) geht es einfach weiter :) ");
//			}	
//		
	}
}

public class Patient {
	
	private int fromAge;
	private int toAge;
	private String sex;
	private int day;
	private int month;
	private int year;
	
	
	private Patient() {		
	}
	
	public static Patient parseCSVLine(String line) {	
		
		Patient p = new Patient();
		
		String[] parts = line.split(",");		
		String[] age = parts[0].split("-");					
						
		if(age.length < 2 && parts[0].equals("N/A")) {
			p.fromAge = -1;
			p.toAge= -1;
		}else if(age.length < 2) {
			p.fromAge = Integer.parseInt(parts[0]);
			p.toAge = Integer.parseInt(parts[0]);					
		}else if (age.length > 1) {
			p.fromAge = Integer.parseInt(age[0]);
			p.toAge = Integer.parseInt(age[1]);
		}		
		p.sex = parts[1];
		String [] date = parts[2].split("-");
		p.day = Integer.parseInt(date[0]);
		p.month = Integer.parseInt(date[1]);
		p.year = Integer.parseInt(date[2]);
				
		
//		System.out.println(new Patient(fromAge, toAge, sex, day, month, year));
		return p;
		
		
		
	
	}
			
		
	
	public int getFromAge() {
		return fromAge;
	}
	
	public int getToAge() {
		return toAge;
	}
	
	public String getSex() {
		return sex;
	}
	
	public int getDay() {
		return day;
	}
	
	public int getMonth() {
		return month;
	}
	
	public int getYear() {
		return year;
	}	

}




//
//@Override
//public String toString() {
//	String data = fromAge + " " + toAge + " " + sex + " " + day + "." + month + "." + year;
//	return data;
//}



import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class PatientList {	
	
	ArrayList<Patient> pList = new ArrayList<Patient>();
	

	
	public PatientList() {
		
	}
	
	public void addPatient(Patient p) { 
		pList.add(p);
		
		
	}
	
	public void addFromCSVFile(String filepath) {		
		File infile = new File(filepath);
		FileReader fr = null;		
		try {
			fr = new FileReader(infile);
		} catch (FileNotFoundException e) {
			System.out.println("Datei nicht gefunden.");
			System.exit(1);			
		}		
		BufferedReader br = new BufferedReader(fr);		
		try {	
			
			while(br.ready()) { 
				
				String line = br.readLine();

				addPatient(Patient.parseCSVLine(line)); 
				
				}
			
			
		} catch (IOException e) {
			System.out.println("Fehler beim Lesen der Datei.");
			e.printStackTrace();
		}		
	}	
	
	public int getNumPatients() {
		int numOfPatients = pList.size();
		return numOfPatients;
	}
	
	
	public PatientList filterByFromAge(int minfromage, int maxfromage) {
		PatientList pl = new PatientList();
		for(int i = 0; i < pList.size(); i++) {
			if(pList.get(i).getFromAge() > minfromage && pList.get(i).getFromAge() < maxfromage) {
				pl.addPatient(pList.get(i));
				
			}
			
		}
		
		return pl;
	}
	
	
	public PatientList filterByToAge(int mintoage, int maxtoage) {
		PatientList pl = new PatientList();
		for(int i = 0; i < pList.size(); i++) {
			if(pList.get(i).getToAge() > mintoage && pList.get(i).getToAge() < maxtoage) {
				pl.addPatient(pList.get(i));
				
			}
			
		}
		
		return pl;
	}
	
	
	public PatientList filterBySex(String sex) {
		PatientList pl = new PatientList();
		for(int i = 0; i < pList.size(); i++) {
			if(pList.get(i).getSex().equals(sex)) {
				 pl.addPatient(pList.get(i));				 
				 
				 }
			}
		return pl;
		}
	
	
	public PatientList filterByYear(int year) {
		PatientList pl = new PatientList();
		for(int i = 0; i < pList.size(); i++) {
			if(pList.get(i).getYear() == year) {
				 pl.addPatient(pList.get(i));				 
				 
				 }
			}
		return pl;		
	}

	
	public PatientList filterByMonth(int month) {
		PatientList result = new PatientList();
        for (int i = 0; i < pList.size(); i++) {
            if (pList.get(i).getMonth() == month) {
                result.addPatient(pList.get(i));
            }
        }
        return result;
    }
	
	
}	








//public void getInfos() {
//	
//	for(int i = 0; i < pList.size(); i++) {
//	System.out.println(pList.get(i));
//	}
//	
//}
	




public class Loesung {

	
	public static int[] monthlyInfections(PatientList pl, int fromYear, int toYear, int fromMonth, int toMonth) {
		
		int a;
		int c;
		
		if(toYear - fromYear <= 0 ) {  // 2021 - 2020 = 1; 1 > 0
			a = toMonth - fromMonth + 1 ;   
			c = 0;						
		}else {
			a = 13 - fromMonth;    // a = 13 - 1 = 12;
			c = toMonth;  			// c = 12;
		}
		
		int b = 0;
		if((toYear - fromYear - 1) > 0) {  // 2021 - 2020 -1 = 0; 
			b = (toYear - fromYear - 1) * 12; // b = 0;
		}
		
		int d = a + b + c;  // d = 12 + 0 + 12 = 24
		
		int[] month = new int[d];
		
		
		for(int i = 0; i < month.length; i++) {
//											1						2020
			month[i] = pl.filterByMonth(fromMonth).filterByYear(fromYear).getNumPatients();
			
			System.out.println(fromMonth + "." + fromYear  + ": " + pl.filterByMonth(fromMonth).filterByYear(fromYear).getNumPatients());
			
		
			fromMonth++;
			if(toYear - fromYear > 0 && (i+1) == a || ((i - a) % 12) == 0 && b != 0) {
				fromYear += 1;
				fromMonth -= 12;
				
			}
			
		}

		return month;
	}
	
	/**
	 * mont
	 */


}

//int i = 0;
//if(i < a) {
//	month[i] = pl.filterByYear(fromYear+i).filterByMonth(fromMonth).getNumPatients();
//	i++;
//}else if{
//	if(i < ) {
//		month[i] = pl.filterByYear(fromYear+i).filterByMonth(fromMonth + 1).getNumPatients();
//		i++;
//	}
//				
//}


